{"version":3,"file":"9d8c4650-e09dcd2571cd0ce52fc1.js","mappings":"yLAIA,6nBASA,IAAgBA,IACd,MAAM,MAAEC,EAAF,IAASC,EAAT,UAAcC,EAAd,MAAyBC,GAAUJ,GAClCK,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GAM/BC,GAAoBC,EAAAA,EAAAA,IAAI,CAC5BC,MAAO,MACPC,OAAQ,YACRC,YAAaP,EAASQ,EAAAA,EAAAA,QAAAA,OAAuB,sBAC7CC,WAAY,OACZC,SAAU,QACVC,OAAQ,UANmB,yBASvBC,EAAO,EAKPC,EAAS,EAOTC,EAAI,EAOJC,GAAeX,EAAAA,EAAAA,IAAI,CACvBY,gBAAiBhB,EAASQ,EAAAA,EAAAA,QAAAA,OAAuB,uBAD3B,yBAIlBS,EAAO,EASPC,EAAQ,EASd,OACEC,EAAAA,EAAAA,IAAAA,OAAAA,CAAMf,IAAKD,EAAmBiB,QAvDX,KACnBnB,GAAUoB,IAAeA,MAuDtBrB,GACCmB,EAAAA,EAAAA,IAACG,EAAAA,EAAD,CACElB,IAAG,EACHmB,IAAI,iCACJC,IAAI,GAHN,sBAMAL,EAAAA,EAAAA,IAACG,EAAAA,EAAD,CACElB,IAAG,EACHmB,IAAI,wCACJC,IAAI,GAHN,uBAMFL,EAAAA,EAAAA,IAAAA,MAAAA,CAAKf,IAAKQ,IACRO,EAAAA,EAAAA,IAAAA,IAAAA,CAAGf,IAAKS,GAAYjB,IACpBuB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKf,IAAKU,GACPjB,IAEHsB,EAAAA,EAAAA,IAAAA,KAAAA,CAAIf,IAAKW,KACTI,EAAAA,EAAAA,IAAAA,IAAAA,CAAGf,IAAKS,GAAYf,IACpBqB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKf,IAAKa,GACPlB,EAAM0B,KAAI,CAACC,EAAMC,KAChBR,EAAAA,EAAAA,IAAAA,IAAAA,CAAGS,IAAKD,EAAOvB,IAAKc,GACjBQ","sources":["webpack://gatsby-starter-hello-world/./src/components/planButton.tsx"],"sourcesContent":["import React, { useState } from \"react\"\nimport { css } from \"@emotion/react\"\nimport color from \"../styles/color\"\nimport mq from \"../styles/mediaQuery\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport type planButtonProps = {\n  title: string\n  Img: JSX.Element\n  priceText: string\n  chips: string[]\n}\n\nexport default (props: planButtonProps) => {\n  const { title, Img, priceText, chips } = props\n  const [active, setActive] = useState(false)\n\n  const switchActive = () => {\n    setActive(prevActive => !prevActive)\n  }\n\n  const planButtonWrapper = css({\n    width: \"27%\",\n    border: \"6px solid\",\n    borderColor: active ? color.primary.select : \"rgba(0, 0, 0, 0.12)\",\n    userSelect: \"none\",\n    minWidth: \"289px\",\n    margin: \"0 auto\",\n  })\n\n  const display = css({\n    textAlign: \"center\",\n    padding: \"0 20px 20px 20px\",\n  })\n\n  const planTitle = css({\n    color: \"rgba(0, 0, 0, 0.54)\",\n    fontSize: \"1.9rem\",\n    fontWeight: \"700\",\n    marginBottom: \"16px\",\n  })\n\n  const logo = css({\n    width: \"33px\",\n    height: \"35px\",\n    margin: \"0 auto\",\n    marginBottom: \"16px\",\n  })\n\n  const planButtonHr = css({\n    backgroundColor: active ? color.primary.select : \"rgba(0, 0, 0, 0.12)\",\n  })\n\n  const gapFlex = css({\n    display: \"flex\",\n    justifyContent: \"center\",\n    gap: \"24px\",\n    marginBottom: \"16px\",\n    paddingTop: \"16px\",\n    flexWrap: \"wrap\",\n  })\n\n  const chipText = css({\n    fontSize: \"1.5rem\",\n    color: \"gray\",\n    padding: \"4px\",\n    border: \"1px solid gray\",\n    borderRadius: \"8px\",\n    display: \"inline-block\",\n  })\n\n  return (\n    <span css={planButtonWrapper} onClick={switchActive}>\n      {active ? (\n        <StaticImage\n          css={{ width: \"16px\", height: \"16px\", margin: \"8px\" }}\n          src=\"../../static/images/select.png\"\n          alt=\"\"\n        />\n      ) : (\n        <StaticImage\n          css={{ width: \"16px\", height: \"16px\", margin: \"8px\" }}\n          src=\"../../static/images/disableSelect.png\"\n          alt=\"\"\n        />\n      )}\n      <div css={display}>\n        <p css={planTitle}>{title}</p>\n        <div css={logo}>\n          {Img}\n        </div>\n        <hr css={planButtonHr} />\n        <p css={planTitle}>{priceText}</p>\n        <div css={gapFlex}>\n          {chips.map((data, index) => (\n            <p key={index} css={chipText}>\n              {data}\n            </p>\n          ))}\n        </div>\n      </div>\n    </span>\n  )\n}\n"],"names":["props","title","Img","priceText","chips","active","setActive","useState","planButtonWrapper","css","width","border","borderColor","color","userSelect","minWidth","margin","display","planTitle","logo","planButtonHr","backgroundColor","gapFlex","chipText","___EmotionJSX","onClick","prevActive","StaticImage","src","alt","map","data","index","key"],"sourceRoot":""}