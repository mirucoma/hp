{"version":3,"file":"305345b1-58184be7b3185b44b0cb.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/components/detail.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { css } from \"@emotion/react\"\nimport color from \"../styles/color\"\nimport mq from \"../styles/mediaQuery\"\nimport { Navigation } from \"swiper\"\n\nimport { Swiper, SwiperSlide } from \"swiper/react\"\nimport { Swiper as SwiperType } from \"swiper/types\"\n\nimport { plans, slideData } from \"../datas/content\"\n\nimport useDetailActiveSlide from \"../hooks/DetailActiveSlide/useDetailActiveSlide\"\nimport useScrollToDetailSlide from \"../hooks/ScrollToDetailSlide/useScrollToDetailSlide\"\n\nexport default () => {\n  const [swiper, setSwiper] = useState<SwiperType>()\n  const { activeDetailSlide, setActiveDetailSlide } = useDetailActiveSlide()\n\n  const { targetRef } = useScrollToDetailSlide()\n\n  const handleChangeActive = (index: number) => {\n    setActiveDetailSlide(index)\n  }\n\n  useEffect(() => {\n    swiper?.slideTo(0, 500)\n  }, [activeDetailSlide])\n\n  const detailWrapper = css({\n    backgroundColor: color.primary.light,\n    textAlign: \"center\",\n    padding: \"16px\",\n  })\n\n  const detailTitle = css({\n    fontSize: \"3rem\",\n    padding: \"24px\",\n  })\n\n  const detailBody = css({\n    display: \"flex\",\n    justifyContent: \"center\",\n    gap: \"48px\",\n    [mq[0]]: { flexDirection: \"column\", gap: \"16px\" },\n  })\n\n  const list = css({\n    backgroundColor: \"white\",\n    width: \"32%\",\n    //width: \"320px\",\n    // minWidth: \"320px\",\n    // maxWidth: \"320px\",\n    textAlign: \"left\",\n    boxShadow:\n      \"rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px\",\n    ul: {\n      listStyle: \"none\",\n    },\n    li: {\n      fontSize: \"2rem\",\n      padding: \"24px\",\n      marginTop: \"16px\",\n    },\n    \"li:hover\": {\n      backgroundColor: color.primary.light,\n    },\n\n    [mq[0]]: {\n      width: \"100%\",\n      backgroundColor: \"transparent\",\n      boxShadow: \"none\",\n      ul: {\n        display: \"flex\",\n        gap: \"16px\",\n        overflowX: \"scroll\",\n      },\n      li: {\n        fontSize: \"1rem\",\n        color: \"gray\",\n        padding: \"8px\",\n        border: \"1px solid gray\",\n        borderRadius: \"14px\",\n        flex: \" 0 0 auto\",\n      },\n    },\n  })\n\n  const activePlan = css({\n    borderLeft: \"4px solid\",\n    borderColor: color.primary.main + \"!important\",\n    color: color.primary.main + \" !important\",\n  })\n\n  const sliderWrapper = css({\n    backgroundColor: \"white\",\n    padding: \"16px\",\n    width: \"68%\",\n    maxWidth: \"880px\",\n    height: \"auto\",\n    boxShadow:\n      \"rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px\",\n    [mq[0]]: {\n      width: \"100%\",\n      padding: \"0px\",\n      backgroundColor: \"transparent\",\n      boxShadow: \"none\",\n    },\n  })\n\n  const slideImage = css({\n    width: \"100%\",\n    maxWidth: \"100%\",\n    height: \"auto\",\n    border: \"1px solid gray\",\n    [mq[0]]:{ width: \"93%\", margin: \"0 auto\"}\n  })\n\n  const slideTextWrapper = css({\n    p: { fontSize: \"2rem\" },\n    textAlign: \"left\",\n    paddingBottom: \"24px\",\n    borderBottom: \"1px dashed rgba(0, 0, 0, 0.12)\",\n\n    [mq[0]]: {\n      p: { fontSize: \"1rem\" },\n      backgroundColor: \"white\",\n      borderRadius: \"16px\",\n      padding: \"8px\",\n      boxShadow:\n      \"rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px\",\n      border: \"none\",\n      width: \"93%\",\n      margin: \"16px auto\",\n    },\n  })\n\n  const slideTitle = css({\n    display: \"inline\",\n    borderBottom: \"4px double\",\n    borderColor: color.primary.main,\n  })\n\n  const slideText = css({\n    padding: \"8px\",\n  })\n\n  const buttonWraopped = css({\n    textAlign: \"right\",\n    \".swiper-button-disabled\": {\n      color: \"gray\",\n    },\n    marginTop: \"8px\",\n  })\n  const button = css({\n    backgroundColor: \"transparent\",\n    cursor: \"pointer\",\n    outline: \"none\",\n    appearance: \"none\",\n    fontSize: \"1.7rem\",\n    border: \"1px solid\",\n    padding: \"4px\",\n    marginLeft: \"8px\",\n    color: color.primary.main,\n  })\n\n  return (\n    <>\n      <div ref={targetRef} css={detailWrapper}>\n        <p css={detailTitle}>機能紹介</p>\n        <div css={detailBody}>\n          <div css={list}>\n            <ul>\n              {plans.map((key: string, index: number) => (\n                <li\n                  css={index == activeDetailSlide ? activePlan : \"\"}\n                  onClick={() => handleChangeActive(index)}\n                  key={index}\n                >\n                  {key}\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div css={sliderWrapper}>\n            <Swiper\n              slidesPerView={1}\n              modules={[Navigation]}\n              navigation={{\n                prevEl: \".prev\",\n                nextEl: \".next\",\n              }}\n              spaceBetween={50}\n              pagination={{ clickable: true }}\n              onSwiper={data => setSwiper(data)}\n            >\n              {slideData[activeDetailSlide].map((data, index) => (\n                <SwiperSlide key={index}>\n                  <div css={slideImage}>{data.image}</div>\n\n                  <div css={slideTextWrapper}>\n                    <p css={slideTitle}>{data.title}</p>\n                    <p css={slideText}>{data.detail}</p>\n                  </div>\n                </SwiperSlide>\n              ))}\n            </Swiper>\n\n            <div css={buttonWraopped}>\n              <button className=\"prev\" css={button}>\n                ←前へ\n              </button>\n              <button className=\"next\" css={button}>\n                次へ→\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n"],"names":["swiper","setSwiper","useState","activeDetailSlide","setActiveDetailSlide","useDetailActiveSlide","targetRef","useScrollToDetailSlide","useEffect","slideTo","detailWrapper","css","backgroundColor","color","textAlign","padding","detailTitle","detailBody","display","justifyContent","gap","mq","flexDirection","list","width","boxShadow","ul","listStyle","li","fontSize","marginTop","overflowX","border","borderRadius","flex","activePlan","borderLeft","borderColor","sliderWrapper","maxWidth","height","slideImage","margin","slideTextWrapper","p","paddingBottom","borderBottom","slideTitle","slideText","buttonWraopped","button","cursor","outline","appearance","marginLeft","___EmotionJSX","ref","plans","key","index","onClick","handleChangeActive","Swiper","slidesPerView","modules","Navigation","navigation","prevEl","nextEl","spaceBetween","pagination","clickable","onSwiper","data","slideData","map","SwiperSlide","image","title","detail","className"],"sourceRoot":""}